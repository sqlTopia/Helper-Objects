CREATE FUNCTION cron_decode_expression_fn
(
        @range VARCHAR(MAX),
        @value_min INT,
        @value_max INT,
        @value_default INT
)
RETURNS TABLE
AS
RETURN  WITH cteSource(range_low, range_high, range_base, range_step)
        AS (
                SELECT  CASE
                                WHEN src.value = '*' THEN @value_default
                                WHEN TRY_CAST(src.value AS INT) IS NOT NULL THEN TRY_CAST(src.value AS INT)
                                WHEN PATINDEX('%[-/]%', src.value) >= 1 THEN TRY_CAST(REPLACE(SUBSTRING(src.value, 1, PATINDEX('%[-/]%', src.value) - 1), '*', @value_default) AS INT)
                                ELSE CAST(NULL AS INT)
                        END AS range_low,
                        CASE
                                WHEN src.value = '*' THEN @value_max
                                WHEN TRY_CAST(src.value AS INT) IS NOT NULL THEN TRY_CAST(src.value AS INT)
                                WHEN CHARINDEX('-', src.value) >= 1 THEN TRY_CAST(SUBSTRING(src.value, CHARINDEX('-', src.value) + 1, LEN(src.value)) AS INT)
                                WHEN CHARINDEX('/', src.value) >= 1 THEN @value_max
                                ELSE CAST(NULL AS INT)
                        END AS range_high,
                        CASE
                                WHEN CHARINDEX('/', src.value) >= 1 THEN TRY_CAST(REPLACE(SUBSTRING(src.value, 1, CHARINDEX('/', src.value) - 1), '*', @value_default) AS INT)
                                ELSE CAST(NULL AS INT)
                        END AS range_base,
                        CASE
                                WHEN CHARINDEX('/', src.value) >= 1 THEN TRY_CAST(SUBSTRING(src.value, CHARINDEX('/', src.value) + 1, LEN(src.value) - CHARINDEX('/', src.value)) AS INT)
                                ELSE CAST(NULL AS INT)
                        END AS range_step
                FROM    STRING_SPLIT(@range, ',') AS src
                WHERE   @value_min <= @value_max
        )
        SELECT DISTINCT w.number
        FROM            (
                                SELECT  CASE
                                                WHEN cte.range_low <= @value_min THEN @value_min
                                                ELSE cte.range_low
                                        END AS value_min,
                                        CASE
                                                WHEN cte.range_high >= @value_max THEN @value_max
                                                ELSE cte.range_high
                                        END AS value_max,
                                        cte.range_base,
                                        cte.range_step
                                FROM    cteSource AS cte
                                WHERE   cte.range_low <= @value_max
                                        AND cte.range_high >= @value_min
                        ) AS src
        CROSS APPLY     dbo.get_numbers(src.value_min, src.value_max) AS w
        WHERE           src.range_base IS NULL
                        OR src.range_base IS NOT NULL AND (w.number - src.range_base) % src.range_step = 0;
GO
